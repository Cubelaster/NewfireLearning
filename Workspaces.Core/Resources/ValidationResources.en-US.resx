<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Code" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="CompanyId" xml:space="preserve">
    <value>Company</value>
  </data>
  <data name="PropertyRequired" xml:space="preserve">
    <value>Data for "{PropertyName}" is required.</value>
  </data>
  <data name="PropertyLength" xml:space="preserve">
    <value>Data for "{PropertyName}" has to be between {MinLength} and {MaxLength} characters.</value>
  </data>
  <data name="IdentificatorRequired" xml:space="preserve">
    <value>Update is not possible without an id.</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Identifier</value>
  </data>
  <data name="PropertyLengthExact" xml:space="preserve">
    <value>Data for "{PropertyName}" has to be exactly {MaxLength} characters long.</value>
  </data>
  <data name="CountryId" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="PropertyGreaterThan" xml:space="preserve">
    <value>Data for "{PropertyName}" has to be greater than {ComparisonValue}.</value>
  </data>
  <data name="DateFrom" xml:space="preserve">
    <value>Date From</value>
  </data>
  <data name="PostalCodeUXBroken" xml:space="preserve">
    <value>Unique combination of name: "{0}" and code: "{1}" for postal codes already exists. Entry not possible.</value>
  </data>
  <data name="PostalCodeUXCodeExists" xml:space="preserve">
    <value>Postal code "{0}" already exists, however the entry is allowed because an unique combination containing the name "{1}" does not exist yet.</value>
  </data>
  <data name="TaxGroupUXBroken" xml:space="preserve">
    <value>Unique combination of tax "{0}" and special tax "{1}" already exists. Entry not possible.</value>
  </data>
  <data name="Number" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="CountryUXBroken" xml:space="preserve">
    <value>Country with unique parameter "{0}" with value "{1}" already exists.</value>
  </data>
  <data name="UniqueConstraintBroken" xml:space="preserve">
    <value>Unique constraint broken. Some parameters already exist.</value>
  </data>
  <data name="ParameterWithValue" xml:space="preserve">
    <value>Parameter "{0}" with value "{1}"</value>
  </data>
  <data name="Action" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone number</value>
  </data>
  <data name="MobilePhone" xml:space="preserve">
    <value>Mobile phone number</value>
  </data>
  <data name="PostalCodeId" xml:space="preserve">
    <value>Postal code</value>
  </data>
  <data name="PartnerId" xml:space="preserve">
    <value>Partner</value>
  </data>
  <data name="ValidOn" xml:space="preserve">
    <value>Valid On</value>
  </data>
  <data name="PropertyNotAllowedToChange" xml:space="preserve">
    <value>Data for "{PropertyName}" must not change once set.</value>
  </data>
  <data name="NameShort" xml:space="preserve">
    <value>Abbreviation</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="BarCode" xml:space="preserve">
    <value>Barcode</value>
  </data>
  <data name="UnitOfMeasureId" xml:space="preserve">
    <value>Unit of Measure</value>
  </data>
  <data name="ArticleId" xml:space="preserve">
    <value>Article</value>
  </data>
  <data name="DateTo" xml:space="preserve">
    <value>Date To</value>
  </data>
  <data name="ConfigDataIncomplete" xml:space="preserve">
    <value>Configuration not fully complete.</value>
  </data>
  <data name="AtLeastOneRequired" xml:space="preserve">
    <value>At least one entry for "{PropertyName}" is required.</value>
  </data>
  <data name="CurrencyId" xml:space="preserve">
    <value>Currency</value>
  </data>
  <data name="Currencies" xml:space="preserve">
    <value>Currencies</value>
  </data>
  <data name="Modifier" xml:space="preserve">
    <value>Modifier</value>
  </data>
  <data name="Intervals" xml:space="preserve">
    <value>Interval</value>
  </data>
  <data name="DecimalPlacesSettingsUXBroken" xml:space="preserve">
    <value>Unique combinaion of entity: "{0}" and property: "{1}" already exists. Entry not possible.</value>
  </data>
  <data name="PurchasePrice" xml:space="preserve">
    <value>Purchase Price</value>
  </data>
  <data name="SalesPrice" xml:space="preserve">
    <value>Sales Price</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="PriceNet" xml:space="preserve">
    <value>Price Net</value>
  </data>
  <data name="ExciseDuty" xml:space="preserve">
    <value>Excise Duty</value>
  </data>
  <data name="MarginPercentage" xml:space="preserve">
    <value>Margin Percentage</value>
  </data>
  <data name="MarginAmount" xml:space="preserve">
    <value>Margin Amount</value>
  </data>
  <data name="RebatePercentage" xml:space="preserve">
    <value>Rebate Percentage</value>
  </data>
  <data name="RebateAmount" xml:space="preserve">
    <value>Rebate Amount</value>
  </data>
  <data name="SettingForEntityType" xml:space="preserve">
    <value>Entity</value>
  </data>
  <data name="ValueNotAllowed" xml:space="preserve">
    <value>Value not allowed for property: "{PropertyName}".</value>
  </data>
  <data name="Year" xml:space="preserve">
    <value>Year</value>
  </data>
  <data name="DateRangeOverlap" xml:space="preserve">
    <value>Selected "{0}" overlaps with existing one: "{1}".</value>
  </data>
  <data name="DateRange" xml:space="preserve">
    <value>Date Range</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="ArticleCode" xml:space="preserve">
    <value>Article Code</value>
  </data>
  <data name="DocumentDeletionNotAllowedNotLastDocument" xml:space="preserve">
    <value>Deleting document not allowed because the document number is not the greatest.</value>
  </data>
  <data name="DocumentModificationNotAllowedHasChildren" xml:space="preserve">
    <value>Modifying document not allowed because there are connected documents.</value>
  </data>
  <data name="RegistrationPlate" xml:space="preserve">
    <value>Registration Plate</value>
  </data>
  <data name="DeleteNotPossibleExistingDependenciesWithDependenciesList" xml:space="preserve">
    <value>Delete not allowed. There is data that depends on this entity. Data in question: {0}.</value>
  </data>
  <data name="DeleteNotPossibleExistingDependencies" xml:space="preserve">
    <value>Delete not allowed. There is data that depends on this entity.</value>
  </data>
  <data name="UpdateNotPossibleExistingDependenciesWithDependenciesList" xml:space="preserve">
    <value>Update not allowed. There is data that depends on this entity. Data in question: {0}.</value>
  </data>
</root>